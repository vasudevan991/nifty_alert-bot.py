import yfinance as yf
import pandas as pd
import requests
import time

# === TELEGRAM SETTINGS ===
TELEGRAM_TOKEN = '7511613332:AAGxdNIUsUFZL5JY5gAfL0aKeqqqD2Km8pY'
CHAT_ID = '383202961'

def send_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
        print(f"‚úÖ Sent: {message[:50]}...")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Telegram error: {e}")

# === SIGNAL FUNCTION ===
def get_signals(stock):
    try:
        df = yf.download(stock + ".NS", period='120d', interval='1d', auto_adjust=True, progress=False)
    except Exception as e:
        print(f"‚ö†Ô∏è Download error for {stock}: {e}")
        return None

    if df.empty or len(df) < 100:
        return None

    df['SMA50'] = df['Close'].rolling(50).mean()
    df['SMA100'] = df['Close'].rolling(100).mean()
    df['SMA200'] = df['Close'].rolling(200).mean()
    df['MACD'] = df['Close'].ewm(span=12).mean() - df['Close'].ewm(span=26).mean()
    df['Signal'] = df['MACD'].ewm(span=9).mean()

    df = df.dropna()
    if df.empty or len(df) < 2:
        return None

    latest = df.iloc[-1]
    prev = df.iloc[-2]
    alerts = []

    if latest['MACD'] > latest['Signal'] and prev['MACD'] < prev['Signal']:
        alerts.append("üìä MACD Bullish Crossover")

    if latest['SMA50'] > latest['SMA100'] and prev['SMA50'] <= prev['SMA100']:
        alerts.append("üìò SMA50 crossed above SMA100")

    if latest['SMA50'] > latest['SMA200'] and prev['SMA50'] <= prev['SMA200']:
        alerts.append("üü¢ SMA50 Golden Cross over SMA200")

    if alerts:
        return f"üìà {stock} Alert:\n" + "\n".join(alerts)
    return None

# === MAIN ===
if __name__ == "__main__":
   all_stocks = ['AXISBANK', 'BALKRISIND', 'CUMMINSIND', 'DMART', 'ESCORTS',
              'GODREJCP', 'ICICIBANK', 'ICICIPRULI', 'INFY', 'RELIANCE', 'SBIN', 'TCS']

    print(f"\nüîç Scanning {len(stocks)} stocks...\n")
    for stock in stocks:
        print(f"üïµÔ∏è {stock}")
        try:
            signal = get_signals(stock)
            if signal:
                print(signal)
                send_telegram(signal)
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error processing {stock}: {e}")
